#include<stdio.h>
#include<math.h>
#include<algorithm>
using namespace std;
struct Node{
	double x;
	double y; 
}node[1000];
int tree[100];
struct B{
	double dist;
	int a;
	int b;
	bool operator <(const B &a) const
	{
    	return dist<a.dist;
	}
}bmp[10000];
double cost[100][100]={0.0};
double sq(int a,int t,int c,int d)
{
	return sqrt( (a-t)*(a-t)+(c-d)*(c-d) );
}
int findroot(int x)
{
	if(tree[x]==-1) return x;
	else
	{
		int t=findroot(tree[x]);
		tree[x]=t;
		return t;
	}
}
void main()
{
	int n,i,j;
	while(scanf("%d",&n)!=EOF&&n>0&&n<=100)
	{
		for(i=0;i<100;i++) tree[i]=-1;
		for(i=0;i<n;i++)
		{
			scanf("%lf%lf",&node[i].x,&node[i].y);
		}
		for(i=0;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				if(i==j) cost[i][j]=0;
				else{
				cost[i][j]=sq(node[i].x,node[j].x,node[i].y,node[j].y);
				}
			}
		}
		int size=0;
		for(i=0;i<n;i++)
		{
			for(j=0;j<i;j++)
			{
				bmp[size].dist=cost[i][j];
				bmp[size].a=i;
				bmp[size++].b=j;
			}
		}
		sort(bmp,bmp+size);
		double ans=0.0;
		for(i=0;i<size;i++)
		{
			int a=findroot(bmp[i].a);
			int b=findroot(bmp[i].b);
			if(a!=b)
			{
				tree[a]=b;
				ans+=bmp[i].dist;
			}
		}
		printf("%lf",ans);
	}
}
