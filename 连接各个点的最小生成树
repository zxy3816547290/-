#include<stdio.h>
#include<math.h>
#include<algorithm>
using namespace std;
struct point{
	int x;
	int y;
}p[100];
struct edge{
	int a;
	int b;
	int dist;
	bool operator <(const edge &a) const{
		return dist<a.dist;
	}
}e[10000];
int tree[100];
int findroot(int a)
{
	if(tree[a]==-1) return a;
	else
	{
		int tmp=findroot(tree[a]);
		tree[a]=tmp;
		return tmp;
	}
}
void main()
{
	int n;
	while(scanf("%d",&n)!=EOF)
	{
		if(n==0) break;
		int i,j;
		for(i=1;i<=n;i++)
		{
			tree[i]=-1;
		}
		for(i=1;i<=n;i++)
		{
			scanf("%d%d",&p[i].x,&p[i].y);
		}
		int count=1;
		for(i=1;i<=n;i++)
		{
			for(j=i+1;j<=n;j++)
			{
				e[count].a=i;
				e[count].b=j;
				e[count].dist=sqrt((p[i].x-p[j].x)*(p[i].x-p[j].x)+(p[i].y-p[j].y)*(p[i].y-p[j].y));
				count++;
			}
		}
		sort(e+1,e+count);
		int num=0;
		for(i=1;i<count;i++)
		{
			int c=findroot(e[i].a);
			int d=findroot(e[i].b);
			if(c!=d)
			{
				tree[c]=d;
				num+=e[i].dist;
			}
		}
		printf("%d",num);
	}
}
